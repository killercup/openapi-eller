openapi: 3.0.1
info:
  title: PÃ¡hkat API
  description: The last package manager.
  version: 0.1.0
servers: []
security: []
paths:
  /index.json:
    get:
      operationId: repositoryIndex
      summary: Repository Index
      description: Metadata about the entire repository and default settings.
      responses:
        '200':
          description: a repository index
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Repository"
  /packages/index.json:
    get:
      operationId: packagesIndex
      summary: Packages Index
      description: Full index of all packages in a repository.
      responses:
        '200':
          description: a packages index
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Packages"
  /virtuals/index.json:
    get:
      operationId: virtualsIndex
      summary: Virtuals Index
      description: Reference index of all virtuals in a repository.
      responses:
        '200':
          description: a virtuals index
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Virtuals"
  /virtuals/{packageId}/index.json:
    parameters:
      - name: packageId
        in: path
        required: true
        description: The package identifier
        schema:
          type: string
    get:
      operationId: virtual
      summary: Virtual package index
      description: >
        A virtual package references a dependency that is not 
        necessarily controllable within the context of a package manager.

        Examples include a system driver being present, or a proprietary piece of 
        software such as Microsoft Office for which one of your packages is dependant.
      responses:
        '200':
          description: a virtual index
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Virtual"
components:
  x-formats:
    bcp47-tag:
      description: >
        Tags from the BCP 47 RFC used to identify a language and relevant metadata.

        Examples of BCP 47 tags include: en-US, nb, es-417, sr-Cyrl, smj, smn-FI.
  examples:
    package:
      summary: An example Package object
      value: |-
        {
          "@context": "https://pahkat.org/"
          "@type": "Package",
          "id": "test-pkg",
          "name": {
            "en": "Test Package"
          },
          "description": {
            "en": "A test package"
          },
          "version": "1.0.0",
          "category": "test",
          "languages": [
            "zxx"
          ],
          "platform": {
            "macos": ">= 10.10"
          },
          "dependencies": {},
          "virtualDependencies": {},
          "installer": {
            "@type": "https://pahkat.org/TarballInstaller",
            "url": "http://localhost:8000/data/test-pkg/dist/test-pkg_1.0.0.txz",
            "size": 4096,
            "installedSize": 1024
          }
        }
  schemas:
    Repository:
      type: object
      required:
        - base
        - name
        - description
        - primaryFilter
        - channels
      properties:
        "@type":
          type: string
          enum: ["Repository"]
        agent:
          $ref: "#/components/schemas/RepositoryAgent"
        base:
          type: string
          format: uri
        name:
          type: object
          format: bcp47-tag
          additionalProperties:
            type: string
        description:
          type: object
          format: bcp47-tag
          additionalProperties:
            type: string
        primaryFilter:
          type: string
          enum: [category, language]
        channels:
          type: array
          items:
            type: string
            enum: [stable, beta, alpha, nightly]
            minItems: 1
            uniqueItems: true
    RepositoryAgent:
      type: object
      required:
        - name
        - version
      properties:
        name:
          type: string
        version:
          type: string
        url:
          type: string
          format: uri
    Packages:
      type: object
      required:
        - packages
      properties:
        "@type":
          type: string
          enum: ["Packages"]
        packages:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Package"
    Package:
      type: object
      description: The definition of the components of an installable package.
      example: 
        $ref: "#/components/examples/package"
      required:
        - id
        - name
        - description
        - version
        - category
        - languages
        - platform
        - dependencies
        - virtualDependencies
        - installer
      properties:
        "@type":
          type: string
          enum: ["Package"]
        id:
          type: string
        name:
          type: object
          format: bcp47-tag
          additionalProperties:
            type: string
        description:
          type: object
          format: bcp47-tag
          additionalProperties:
            type: string
        version:
          type: string
          format: version
        category:
          type: string
        languages:
          type: array
          items:
            type: string
            format: bcp47-tag
        platform:
          type: object
          description: Standard OS names are "windows", "macos", "linux", "android", "ios".
          additionalProperties:
            type: string
            format: version-pattern
            # TODO: define pattern (like >=, etc) Maybe use NPM style? Or Rust?
        dependencies:
          type: object
          additionalProperties:
            type: string
            format: version-pattern
        virtualDependencies:
          type: object
          additionalProperties:
            type: string
            format: version-pattern
        installer:
          oneOf:
            - $ref: "#/components/schemas/WindowsInstaller"
            - $ref: "#/components/schemas/MacOSInstaller"
            - $ref: "#/components/schemas/TarballInstaller"
          discriminator:
              propertyName: "@type"
    TarballInstaller:
      type: object
      required:
        - url
        - size
        - installedSize
      properties:
        "@type":
          type: string
          enum: ["TarballInstaller"]
        url:
          type: string
          format: uri
        size:
          type: integer
          format: uint64
        installedSize:
          type: integer
          format: uint64
    WindowsInstaller:
      type: object
      required:
        - url
        - productCode
        - size
        - installedSize
        - requiresReboot
        - requiresUninstallReboot
      properties:
        "@type":
          type: string
          enum: ["WindowsInstaller"]
        url:
          type: string
          format: uri
        type:
          type: string
          enum: [msi, inno, nsis]
        args:
          type: string
        uninstallArgs:
          type: string
        productCode:
          type: string
        requiresReboot:
          type: boolean
          default: false
        requiresUninstallReboot:
          type: boolean
          default: false
        size:
          type: integer
          format: uint64
        installedSize:
          type: integer
          format: uint64
        # TODO: signature
    MacOSInstaller:
      type: object
      required:
        - url
        - pkgId
        - targets
        - size
        - installedSize
        - requiresReboot
        - requiresUninstallReboot
      properties:
        "@type":
          type: string
          enum: ["MacOSInstaller"]
        url:
          type: string
          format: uri
        pkgId:
          type: string
        targets:
          type: array
          items:
            type: string
            enum: [system, user]
        requiresReboot:
          type: boolean
          default: false
        requiresUninstallReboot:
          type: boolean
          default: false
        size:
          type: integer
          format: uint64
        installedSize:
          type: integer
          format: uint64
    Virtuals:
      type: object
      required:
        - virtuals
      properties:
        "@type":
          type: string
          enum: ["Virtuals"]
        virtuals:
          type: object
          additionalProperties:
            type: string
            format: version
    Virtual:
      type: object
      required:
        - virtual
        - id
        - name
        - description
        - version
        - url
        - target
      properties:
        "@type":
          type: string
          enum: ["Virtual"]
        virtual:
          type: boolean
          default: true
        id:
          type: string
        name:
          type: object
          format: bcp47-tag
          additionalProperties:
            type: string
        description:
          type: object
          format: bcp47-tag
          additionalProperties:
            type: string
        version:
          type: string
          format: version
        url:
          type: string
          format: uri
        target:
          $ref: "#/components/schemas/VirtualTarget"
    VirtualTarget:
      type: object
      required:
        - registryKey
      properties:
        registryKey:
          $ref: "#/components/schemas/RegistryKey"
    RegistryKey:
      type: object
      required:
        - path
      properties:
        path:
          type: string
        name:
          type: string
        value:
          type: string
          format: registry-kind
          description: The value is parsed based on how the `valueKind` property is set. If it is not set, defaults to a string.
        valueKind:
          type: string
          description: This field corresponds to the .NET RegistryKind enum, and affects how the `value` property is parsed.
          # TODO: this enum
          enum: [string, dword, qword, etc]
          default: string
