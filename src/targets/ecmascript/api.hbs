{{#if config.commonjs}}
const fetch = require("node-fetch")
import { encode as btoa } from "base-64";
{{/if}}
{{#if config.es6}}
import fetch from "node-fetch"
import { encode as btoa } from "base-64";
{{/if}}
{{#if @root.config.urlShim}}

function URL(relative, base) {
    const baseUrl = base.replace(/\/+$/, "")
    const relativeUrl = relative.replace(/^\/+/, "")

    this.toString = function toString() {
        return `${baseUrl}/${relativeUrl}`
    }
}
{{else}}
{{#if @root.config.commonjs}}
const { URL } = require("whatwg-url")
{{/if}}
{{#if @root.config.es6}}
import { URL } from "whatwg-url"
{{/if}}
{{/if}}

{{#if servers}}
{{#if @root.config.es6}}export {{/if}}const {{{name}}}Server = {
{{#each servers}}
{{#if variables}}
  {{{description}}}({{{variables}}}) {
    return "{{{url}}}"
{{#each replacements}}
      .replace("{{{key}}}", {{{value}}})
{{/each}}
    }{{#unless @last}},{{/unless}}
{{else}}
  {{{description}}}: "{{{url}}}"{{#unless @last}},{{/unless}}
{{/if}}
{{/each}}
}
{{#if @root.config.commonjs}}
module.exports.{{{name}}}Server = {{{name}}}Server
{{/if}}

{{/if}}
{{#each security}}
{{#if isApiKey}}
{{#if @root.config.es6}}export {{/if}}function {{name}}ApiKeyInterceptor(apiKey) {
  return function interceptor(url, req) {
{{#if inHeader}}
    if (!req.headers) {
      req.headers = {}
    }

    req.headers["{{{key}}}"] = apiKey
{{/if}}
{{#if inQuery}}
    url.searchParams.set("{{{key}}}", apiKey)
{{/if}}
    return req
  }
}
{{#if @root.config.commonjs}}
module.exports.{{name}}ApiKeyInterceptor = {{name}}ApiKeyInterceptor
{{/if}}
{{/if}}
{{#if isHttp}}
{{#if isBasic}}
{{#if @root.config.es6}}export {{/if}}function {{name}}BasicAuthInterceptor(username, password) {
  return function interceptor(url, req) {
    const base64Data = btoa(`${username}:${password}`)
    const header = `Basic ${base64Data}`
{{/if}}
{{#if isBearer}}
{{#if @root.config.es6}}export {{/if}}function {{name}}BearerInterceptor(bearerToken) {
  return function interceptor(url, req) {
    const header = `Bearer ${bearerToken}`

{{/if}}

    if (!req.headers) {
      req.headers = {}
    }

    req.headers.Authorization = header
    return req
  }
}
{{#if @root/config.commonjs}}
{{#if isBasic}}
module.exports.{{name}}BasicAuthInterceptor = {{name}}BasicAuthInterceptor
{{/if}}
{{#if isBearer}}
module.exports.{{name}}BearerInterceptor = {{name}}BearerInterceptor
{{/if}}
{{/if}}
{{/if}}

{{/each}}
{{#if @root.config.es6}}export {{/if}}class {{name}}Service {
  static create(url, ...interceptors) {
    return new {{name}}Service(url, ...interceptors)
  }

  constructor(baseUrl, ...interceptors) {
    this.baseUrl = baseUrl
    this.interceptors = interceptors
  }

  async _request(url, initial) {
    let out = initial
    for (const interceptor of this.interceptors) {
      out = await interceptor(url, out)
    }
    return out
  }

{{#each groups}}
{{#each endpoints}}
  async {{operationId}}{{{operationParams}}} {
    const __url = new URL(`{{{url}}}`, this.baseUrl)
    const __reqBody = {
      method: "{{httpMethod}}"
    }
{{#if requestParams}}
    {{{requestParams}}}
{{/if}}
    const __options = await this._request(__url, __reqBody)
    const __response = await fetch(__url.toString(), __options)
    const __output = await __response.text()
    return __output
  }

{{/each}}
{{/each}}
}
{{#if config.commonjs}}
module.exports.{{name}}Service = {{name}}Service
{{/if}}
