// Generated! Do not edit!

use std::collections::BTreeMap;
use url::Url;
use serde::{Deserialize, Serialize};

{{#each models}}
{{#if isEnum}}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum {{{name}}} {
{{#each values}}
    #[serde(rename = "{{{value}}}")]
    {{{key}}}{{#unless @last}},{{/unless}}
{{/each}}
}
{{else}}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct {{{name}}} {
{{#each fields}}
    {{#if key}}{{#unless isNameEqualToKey}}#[serde(rename = "{{{key}}}")]{{/unless}}
    {{/if}}{{#if format}}#[openapi(format = "{{{format}}}")]
    {{/if}}{{#if (eq type "Url")}}#[serde(with = "url_serde")]
    {{/if}}pub {{{name}}}: {{#if (or isEnum isOneOf)}}{{{parentName}}}{{/if}}{{{type}}},
{{/each}}
}
{{#each enums}}
{{#if isEnum}}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum {{{../name}}}{{{name}}} {
{{#each values}}
    #[serde(rename = "{{{value}}}")]
    {{{key}}},
{{/each}}
}
{{/if}}
{{#if isOneOf}}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum {{{../name}}}{{{name}}} {
{{#each values}}
    #[serde(rename = "{{{value}}}")]
    {{{key}}}({{{value}}}),
{{/each}}
}
{{/if}}
{{#unless @last}}

{{/unless}}
{{/each}}
{{/if}}

{{/each}}