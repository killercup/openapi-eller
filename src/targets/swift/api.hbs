import Foundation
import Moya
import AppAuth
import RxSwift
import Unbox

// Generated. Do not edit.

public struct {{@root.config.prefix}}InterceptorResult {
    let headers: [String: String]
    let queryParameters: [String: String]
}

public protocol {{@root.config.prefix}}Interceptor: class {
    func intercept(request: {{@root.config.prefix}}InterceptorResult) -> Single<{{@root.config.prefix}}InterceptorResult>
}

{{#each security}}
{{#if isApiKey}}
public class {{{name}}}Interceptor : {{@root.config.prefix}}Interceptor {
    let token: String

    public init(token: String) {
        self.token = token
    }

    public func intercept(request: {{@root.config.prefix}}InterceptorResult) -> Single<{{@root.config.prefix}}InterceptorResult> {
{{#if inHeader}}
        var newHeaders = request.headers
        newHeaders["{{{key}}}"] = token
        return Single.just({{@root.config.prefix}}InterceptorResult(headers: newHeaders, queryParameters: request.queryParameters))
{{/if}}
{{#if inQuery}}
        var newParams = request.queryParameters
        newParams["{{{key}}}"] = token
        return Single.just({{@root.config.prefix}}InterceptorResult(headers: request.headers, queryParameters: newParams))
{{/if}}
    }
}

public struct {{@root.config.prefix}}AuthError: Error {
    let message: String
}

{{/if}}
{{#if isOAuth2}}
public class {{{name}}}OAuth {
    private(set) static var currentAuthFlow: OIDAuthorizationFlowSession? = nil

    private let authorizeURL = URL(string: "{{authorizationUrl}}")!
    private let accessTokenURL = URL(string: "{{tokenUrl}}")!
{{#if refreshUrl}}
    private let refreshURL = URL(string: "{{refreshUrl}}")!
{{/if}}

    let clientID: String
    let redirectURL: URL
    let config: OIDServiceConfiguration
    
    func redirectURL(fromCustom url: URL) -> URL {
        var components = URLComponents(url: redirectURL, resolvingAgainstBaseURL: false)!
        components.query = url.query
        return components.url!
    }

    public init(clientID: String, redirectURL: URL) {
        self.clientID = clientID
        self.redirectURL = redirectURL
        
        config = OIDServiceConfiguration(
            authorizationEndpoint: authorizeURL,
            tokenEndpoint: accessTokenURL)
    }
    
    public enum Scope: String {
{{#each scopes}}
        case {{{name}}} = "{{{value}}}"
{{/each}}
    }

    public class OAuthInterceptor: {{@root.config.prefix}}Interceptor {
        let authState: OIDAuthState
        
        init(authState: OIDAuthState) {
            self.authState = authState
        }
        
        public func intercept(request: {{@root.config.prefix}}InterceptorResult) -> Single<{{@root.config.prefix}}InterceptorResult> {
            return Single.create(subscribe: { emitter in
                self.authState.performAction(freshTokens: { (accessToken, idToken, error) in
                    if let error = error {
                        emitter(.error(error))
                    } else if let token = accessToken {
                        var newHeaders = request.headers
                        newHeaders["Authorization"] = "Bearer \(token)"
                        let newResult = {{@root.config.prefix}}InterceptorResult(headers: newHeaders, queryParameters: request.queryParameters)
                        emitter(.success(newResult))
                    }
                })
                
                return Disposables.create()
            })
        }
    }
    
    static public func interceptor(authState: OIDAuthState) -> OAuthInterceptor {
        return OAuthInterceptor(authState: authState)
    }

    func authorize(with viewController: UIViewController, scopes: [Scope], clientSecret: String? = nil, additionalParameters: [String: String]? = nil) -> Single<OIDAuthState> {
        if {{{name}}}OAuth.currentAuthFlow != nil {
            return Single.error(AuthError(message: "Current flow is not nil"))
        }
        
        let authReq = OIDAuthorizationRequest(
            configuration: config,
            clientId: clientID,
            clientSecret: clientSecret,
            scope: scopes.map { $0.rawValue }.joined(separator: " "),
            redirectURL: redirectURL,
            responseType: OIDResponseTypeCode,
            state: nil,
            codeVerifier: nil,
            codeChallenge: nil,
            codeChallengeMethod: nil,
            additionalParameters: additionalParameters)
        
        return Single.create(subscribe: { emitter in
            {{{name}}}OAuth.currentAuthFlow =
                OIDAuthState.authState(
                        byPresenting: authReq,
                        presenting: viewController,
                        callback: { (state: OIDAuthState?, err: Error?) in
                    if let err = err {
                        emitter(.error(err))
                    } else if let state = state {
                        emitter(.success(state))
                    } else {
                        fatalError("Neither state nor error were not null, and this is not recoverable.")
                    }
                })
            
            return Disposables.create {
                {{{name}}}OAuth.currentAuthFlow = nil
            }
        })
    }
}

{{/if}}
{{/each}}

fileprivate class {{@root.config.prefix}}MoyaConfigurableProvider<T: TargetType>: MoyaProvider<T> {
    public init(baseURL: URL,
                interceptors: [{{@root.config.prefix}}Interceptor],
                headers: [String: String] = [:],
                queryParameters: [String: String] = [:],
                requestClosure: @escaping RequestClosure = MoyaProvider.defaultRequestMapping,
                stubClosure: @escaping StubClosure = MoyaProvider.neverStub,
                callbackQueue: DispatchQueue? = nil,
                manager: Manager = MoyaProvider<Target>.defaultAlamofireManager(),
                plugins: [PluginType] = [],
                trackInflights: Bool = false) {

        let newEndpointClosure: EndpointClosure = { target in
            let urlComponents = URLComponents(string: baseURL.absoluteString.appending(target.path))!
            guard let url = urlComponents.url?.absoluteString else {
                fatalError("Can not convert components to URL for \(target.path)")
            }

            return Endpoint(
                url: url,
                sampleResponseClosure: { return .networkResponse(200, Data()) },
                method: target.method,
                task: target.task,
                httpHeaderFields: target.headers)
        }
        
        let newRequestClosure: RequestClosure = { (endpoint, done) in
            var req = try! endpoint.urlRequest()

            var resultObs = Single.just({{@root.config.prefix}}InterceptorResult(headers: [:], queryParameters: [:]))

            interceptors.forEach { interceptor in
                resultObs = resultObs.flatMap { result in interceptor.intercept(request: result) }
            }

            resultObs.subscribe(onSuccess: { results in
                if req.allHTTPHeaderFields == nil {
                    req.allHTTPHeaderFields = [:]
                }

                req.allHTTPHeaderFields?.merge(results.headers, uniquingKeysWith: { _, new in new })

                var urlComponents = URLComponents(string: req.url!.absoluteString)!
                for (k, v) in results.queryParameters {
                    urlComponents.queryItems?.append(URLQueryItem(name: k, value: v))
                }

                guard let url = urlComponents.url else {
                    fatalError("Can not convert components to URL for \(req)")
                }

                req.url = url
                done(.success(req))
            }, onError: { err in
                done(.failure(.encodableMapping(err)))
            })
        }

        super.init(
            endpointClosure: newEndpointClosure,
            requestClosure: newRequestClosure,
            stubClosure: stubClosure,
            callbackQueue: callbackQueue,
            manager: manager,
            plugins: plugins,
            trackInflights: trackInflights)
    }
}

{{#if servers}}
public enum {{{name}}}Server: CustomStringConvertible {
    typealias RawValue = String

{{#each servers}}
{{#if parameters}}
    case {{{description}}}({{{parameters}}})
{{else}}
    case {{{description}}}
{{/if}}
{{/each}}

    public var description: String {
        switch self {
{{#each servers}}
{{#if arguments}}
        case .{{{description}}}({{{arguments}}}):
            return "{{{url}}}"
{{else}}
        case .{{{description}}}:
            return "{{{url}}}"
{{/if}}
{{/each}}
        }
    }

    public var url: URL {
        return URL(string: self.description)!
    }

    init?(rawValue: String) {
        return nil
    }

    var rawValue: String {
        return self.description
    }
}
{{/if}}

enum {{{name}}}: TargetType {
{{#each groups}}
{{#each endpoints}}
{{#if operationParams}}
    case {{{operationId}}}({{{operationParams}}})
{{else}}
    case {{{operationId}}}
{{/if}}
{{/each}}
{{/each}}

    var baseURL: URL { fatalError("baseURL must be set by the provider.") }

    var sampleData: Data {
        return Data()
    }
    
    var headers: [String : String]? {
        return nil
    }
    
    var path: String {
        switch self {
{{#each groups}}
{{#each endpoints}}
{{#if operationArgs}}
        case let .{{{operationId}}}{{{operationArgs}}}:
{{else}}
        case .{{{operationId}}}:
{{/if}}
            return "{{{url}}}"
{{/each}}
{{/each}}
        }
    }

    var method: Moya.Method {
        switch self {
{{#each groups}}
{{#each endpoints}}
        case .{{{operationId}}}:
            return .{{{httpMethod}}}
{{/each}}
{{/each}}
        }
    }

    var task: Task {
        switch self {
{{#each groups}}
{{#each endpoints}}
{{#if operationArgs}}
        case let .{{{operationId}}}{{{operationArgs}}}:
{{else}}
        case .{{{operationId}}}:
{{/if}}
            {{{requestParams}}}
{{/each}}
{{/each}}
        }
    }
}

public class {{{name}}}Service {
    private let provider: {{@root.config.prefix}}MoyaConfigurableProvider<{{{name}}}>

{{#if servers}}
    public init(server: {{{name}}}Server, interceptors: [{{@root.config.prefix}}Interceptor] = [], plugins: [PluginType] = []) {
        provider = {{@root.config.prefix}}MoyaConfigurableProvider(baseURL: server.url, interceptors: interceptors, plugins: plugins)
    }
    
{{/if}}
    public init(baseURL: URL, interceptors: [{{@root.config.prefix}}Interceptor] = [], plugins: [PluginType] = []) {
        provider = {{@root.config.prefix}}MoyaConfigurableProvider(baseURL: baseURL, interceptors: interceptors, plugins: plugins)
    }
{{#each groups}}
{{#each endpoints}}

    func {{{operationId}}}({{{operationParamsDefaults}}}) -> Single<{{{returnType}}}> {
        return provider.rx.request({{{../name}}}.{{{operationId}}}{{{operationKwargs}}})
            .filterSuccessfulStatusAndRedirectCodes()
            .map({{{returnType}}}.self)
    }
{{/each}}
{{/each}}
}

{{! MODELS }}
{{#each models}}
{{#if isEnum}}
public enum {{{name}}}: String, Codable, UnboxableEnum {
{{#each values}}
    case {{{key}}} = "{{{value}}}"
{{/each}}
}
{{else}}
public struct {{{name}}}: Hashable, Codable {
{{#each fields}}
    let {{{name}}}: {{{type}}}
{{/each}}

    public var hashValue: Int {
        var v = 0
{{#each fields}}
{{#if isHashable}}
{{#if isOptional}}
        v ^= {{{name}}}?.hashValue ?? 0
{{else}}
        v ^= {{{name}}}.hashValue
{{/if}}
{{else}}
{{! If not hashable, increment by length or size to make hashy enough }}
{{#if isOptional}}
        v += {{{name}}} == nil ? 0 : 1
{{else}}
        v += {{{name}}}.count
{{/if}}
{{/if}}
{{/each}}
        return v
    }

    public static func ==(lhs: {{{name}}}, rhs: {{{name}}}) -> Bool {
{{#each fields}}
{{#if isOptional}}
        if lhs.{{{name}}} == nil && rhs.{{{name}}} != nil { return false }
        if lhs.{{{name}}} != nil && rhs.{{{name}}} == nil { return false }
        if let lv = lhs.{{{name}}}, let rv = rhs.{{{name}}}, lv != rv { return false }
{{else}}
        if lhs.{{{name}}} != rhs.{{{name}}} { return false }
{{/if}}
{{/each}}

        return true
    }

    private enum CodingKeys: String, CodingKey {
{{#each fields}}
        case {{{name}}} = "{{{key}}}"
{{/each}}
    }

{{#each enums}}
{{#if isEnum}}
    public enum {{{name}}}: String, Codable, UnboxableEnum {
{{#each values}}
        case {{{key}}}{{#if value}} = "{{{value}}}"{{/if}}
{{/each}}
    }
{{/if}}
{{#if isOneOf}}
    public enum {{{name}}}: Hashable, Codable, UnboxableEnum {
{{#each values}}
        case {{{key}}}({{{type}}})
{{/each}}

        public static func ==(lhs: {{{name}}}, rhs: {{{name}}}) -> Bool {
            switch (lhs, rhs) {
{{#each values}}
            case let (.{{{key}}}(a), .{{{key}}}(b)):
                return a == b
{{/each}}
            default:
                return false
            }
        }

        public var hashValue: Int {
            switch self {
{{#each values}}
            case let .{{{key}}}(value):
                return value.hashValue
{{/each}}
            }
        }

{{#if discriminator}}
        private enum CodingKeys: String, CodingKey {
            case discriminator = "{{{discriminator}}}"
        }

        private enum DiscriminatorKeys: String, Codable {
{{#each values}}
            case {{{key}}} = "{{{value}}}"
{{/each}}
        }
{{/if}}

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
{{#each values}}
            case let .{{{key}}}(value):
                try container.encode(value)
{{/each}}
            }
        }

        public init(from decoder: Decoder) throws {
            let value = try decoder.singleValueContainer()
{{#if discriminator}}
            let values = try decoder.container(keyedBy: CodingKeys.self)
            let discriminator = try values.decode(DiscriminatorKeys.self, forKey: .discriminator)

            switch discriminator {
{{#each values}}
            case .{{{key}}}:
                self = .{{{key}}}(try value.decode({{{type}}}.self))
{{/each}}
            }
{{else}}
{{#each values}}
{{#unless @last}}
            if let value = try? value.decode({{{type}}}.self) {
                self = .{{{key}}}(value)
                return
            }
{{else}}
            self = .{{{key}}}(try value.decode({{{type}}}.self))
{{/unless}}
{{/each}}
{{/if}}
        }
    }
{{/if}}
{{#unless @last}}

{{/unless}}
{{/each}}
}

extension {{{name}}}: Unboxable {
    public init(unboxer: Unboxer) throws {
{{#each fields}}
        self.{{{name}}} = try unboxer.unbox(key: "{{{key}}}")
{{/each}}
    }
}
{{/if}}

{{/each}}
